UD02.Estruturas de control
Ejercicios Propuestos
DAM1-Programación 2024-25
Condicionales 2
Sobre los ejercicios.
1. Organiza los ficheros de código fuente en los paquetes que se indican en cada
apartado.
2. Nombra los ficheros y las clases con el nombre/código del ejercicio en negrita.
3. Utiliza un comentario de documentación para indicar tu nombre y apellidos como
autor del código.
4. Opcional. Entrega el paquete comprimido en el Aula Virtual al terminar la UD.
Condicionales
Paquete: ud2.ejercicioscondicionales
EP0211. Escribe una aplicación que solicite al usuario un número comprendido entre 0 y
9999. La aplicación tendrá que indicar si el número introducido es capicúa.
EP0212. EI DNI consta de un entero de 8 digitos seguido de una letra que se obtiene a
partir del número de la siguiente forma:
letra = número DNI módulo 23
Basándote en esta información, elige la letra a partir de la numeración de la siguiente tabla:
y diseña una aplicación en la que, dado un número de DNI, calcule la letra que le
corresponde. Observa que un número de 8 digitos está dentro del rango del tipo int.
EP0213. En una granja se compra diariamente una cantidad (comidaDiaria) de comida
para los animales. El número de animales que alimentar (todos de la misma especie) es
numAnimales, y sabemos que cada animal come una media de kilosPorAnimal.
Diseña un programa que solicite al usuario los valores anteriores y determine si disponemos
de alimento suficiente para cada animal. En caso negativo, ha de calcular cuál es la ración
que corresponde a cada uno de los animales.
Nota: Evitar que la aplicación realice divisiones por cero.
EP0214. Escribe un programa que solicite al usuario un número comprendido entre 1 y 99.
El programa debe mostrario con letras, por ejemplo, para 56, se verá: “cincuenta y seis”.
EP0215. Escribe una aplicación que solicite por consola dos números reales que
corresponden a la base y la altura de un triángulo. Deberá mostrarse su área, comprobando
que los números introducidos por el usuario no son negativos, algo que no tendría sentido.
EP0216. Utiliza el operador ternario para calcular el valor absoluto de un número que se
solicita al usuario por teclado.
EP0217. Realiza el “juego de la suma”, que consiste en que aparezcan dos números
aleatorios (comprendidos entre 1 y 99) que el usuario tiene que sumar. La aplicación debe
indicar si el resultado de la operación es correcto o incorrecto.
EP0218. Modifica la actividad anterior (EP0217) para que, además de los dos números
aleatorios, también aparezca aleatoriamente la operación que debe realizar el jugador:
suma, resta o multiplicación.
Amplía el programa anterior para que muestre el número de segundos que el usuario ha
tardado en responder. Utiliza la clase LocalTime.
EP0219. Crea una aplicación que solicite al usuario cuántos grados tiene un ángulo y
muestre el equivalente en radianes. Si el ángulo introducido por el usuario no se encuentra
en el rango de 0° a 360°, hay que transformarlo a dicho rango. Nota: El operador módulo
(%) puede ayudarnos a convertir un ángulo a su equivalente en el rango comprendido de 0
a 360°.
EP0220_Login. Realiza un programa que solicite por teclado un nombre de usuario y
contraseña, y que compruebe si corresponden al usuario “admin” con contraseña “abc123.,”
indicando como resultado un mensaje apropiado.
EP0221_JuegoCuantoTiempo. Realiza un juego que solicite al usuario pulsar Enter
después de trasncurrir un número aleatorio de segundos, que se mostrará al usuario,
elegido al azar entre un número mínimo, por ejemplo 5, y un número máximo, por ejemplo
30. Los límites mínimo y máximo de segundos se definirán como constantes.
El programa contará el tiempo que el usuario ha tardado en pulsar Enter y responderá con
un mensaje diciendo si acertó en el momento correcto o, en caso contrario, cuántos
segundos, de adelanto o de retraso, se desvió.
EP0222_Ahorcado. Haz un programa que lea por teclado un número de fallos en el juego
del ahorcado, entre 0 y 7, y que imprima un dibujo de un ahorcado más o menos completo
en función del número de fallos, como los de los siguientes ejemplos:
Fallos = 0 Fallos = 1 Fallos = 3 Fallos = 6 Fallos = 7
___
| |
|
|
|
|
|
______|
___
| |
O |
|
|
|
|
______|
___
| |
O |
/| |
|
|
|
______|
___
| |
O |
/|\ |
| |
/ |
|
______|
___
| |
O |
/|\ |
| |
/ \ |
|
______|
Completa también los dibujos para 2, 4 y 5 fallos. Fíjate en las partes comunes de los
distintos muñecos e intenta repetir el mínimo código posible.