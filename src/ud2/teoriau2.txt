UD2.1 CONDICIONALES
Estructuras de control

Estructuras de control: definen el orden de ejecución de las instrucciones de un
programa. Consiguen que el flujo de instrucciones varíe si se cumple o no una condición, que se ejecute o repita un bloque de instrucciones u otro.
    características: 
único punto de entrada y salida.
compuestas de instrucciones / otras estructuras de control.


Estructura secuencial: ejecutadas en secuencia en el orden en que aparecen escritas en el programa.
        - se suelen agrupar en bloques definidos por llaves ({ }) para marcar inicio y final 
        - si el bloque tiene una única instrucción no es obligatorio el uso de las llaves
    
Estructura condicional: determina si se ejecutan unas acciones u otras según se cumpla o no una  condición, una expresión lógica o booleana evaluable a true ó false.
if, switch, operador ternario o condicional ? : 

operador ternario
variable = condición ? valor1 : valor2

Recomendable utilizar ternario en vez de if-else por economía y legibilidad cuando sea posible. 
if 
bloque de instrucciones: conjunto de sentencias delimitadas por llaves ({ }). Dentro de un bloque de instrucciones es posible utilizar cualquier número de sentencias,  definir otros bloques de instrucciones y declarar variables dentro de un bloque. 

ámbito de variable: bloque donde se puede utilizar la variable. 
	variables locales: declarada en main > se puede utilizar en todo el programa principal. 
	variables de bloque: sólo podrán ser usadas dentro del bloque en que se declaran. 
if-else 
if (condicion1) {
pasa esto
} else if (condicion2) {
pasa esto otro
} else {
si no, pasa esto }

switch
clásico:
switch (expression) { 
    case value1:
     		// secuencia de sentencias.
     break;
    default:
     		// secuencia de sentencias.
  }
alternativo: 
switch (nota) { 
    case 1,2,3 -> {sout suspenso}

    default:
     		// Default secuencia de sentencias.
  }

switch con yield: 
	case 1,3,5 -> { 
yield 31; }
==========
early return: reduce la cantidad de niveles de anidacion y mejora legibilidad 
  
guard clauses: manejo de causas especiales al principio de una funcion 

==========
evaluación en cortocircuito

evaluación en cortocircuito: técnica de optimización para evitar evaluaciones innecesarias en expresiones booleanas compuestas. Se basa en las propiedades del álgebra booleana, mejora el rendimiento y evita posibles errores.

Funcionamiento
operador AND (&&): Si el primer operando es falso, el resultado será falso independientemente del segundo operando, por lo que este último no se evalúa.
operador OR (||): si el 1 operando es verdadero, el resultado será verdadero independientemente del segundo operando, por lo que este último no se evalúa.

Operador AND (&&)
if (x != 0 && 10/x > 1) {
    // si x es 0, la segunda parte de la expresión no se evalúa > evita división por cero.
}

Operador OR (||)
if (nombre == null || nombre.length() == 0) {
    //si nombre es null, la segunda parte (nombre.length() == 0) no se evalúa, evitando un NullPointerException3.

}


Ventajas
	Eficiencia: Evita cálculos innecesarios
	Prevención de errores: avoid divisiones por cero o acceso a nulos.
	Código más limpio

======
buenas prácticas con condicionales
	nombres claros, utilizar ternarios  
	evitar expresiones redundantes  if (x == true) o if (x == false). Usa if (x) o if (!x) 

	Aplicar evaluación en cortocircuito para optimización (&& y ||)
	las condiciones mas probables y sencillas van antes
	excepciones > condicionales para errores 

===========

2. BUCLES.
Estructura Repetitiva o Iterativa: repite la ejecucion de una o varios bloques de instrucciones según el valor de una expresion lógica (BUCLE) 

iteracion: cada vez que se ejecuta el cuerpo 
condicion de salida: expresion que determina cuando se detiene la wjecucion 

bucles de Java: while, do .. while, for

	controlados por condición: while(0), do while (1)
	controlado por contador: for (0)

bucle infinito: cuando la condicion de salida esta mal planteada y el bucle no acaba nunca 

=========
WHILE: ejecuta 0 o más veces. 

	- ejecuta mientras la condición sea cierta.
	- La condición se evalúa al inicio.

DO-WHILE: ejecuta al menos 1+ veces.
	
	- es el unico q acaba en ; 
	- ejecutan mientras la condición sea cierta.
	- condición evalúa al final.

FOR: ejecuta 0+ veces 

	- diseñado para bucles controlados por contador 
	- inicializacion / condicion / incremento 
	- las 3 zonas son opcionales pero se debe poner ; ; igual 

inicializacion: las variables toman valor inicial (1 o varias separadas x coma) > se hace 1 vez

condicion: exp booleana que determina si se ejecuta o no > evalua despues de la inicializacion pero puese no llegar a ejecutarse 

incremento/decremento: modifica las variables de control del bucle > ejecuta al final de cada iteracion > puede haber más de una expresión para modificar las variables (separadas x comas)

=========
LECTURA ADELANTADA: 
cuando no se sabe en principio cuantas veces se repite el bucle. 
	(si queremos q lea hasta negativo:
		int num;
		int suma = 0; //contador 
		.... while num>0 ... suma+=num 


BUCLE CONTROLADO POR CONTADOR:
	variable contador para controlar las repeticiones 

	(bucle que se repite n veces
		int n = 10 int contador = 0; 
		while (contador < n){ contador++; }  
		// Imprime de 0 a 9

BUCLES ANIDADOS
	estructuras que incluyen un bucle dentro de otro. 

	- pueden ser iguales o diferentes 
	- anidamiento de 2+ niveles
	- se multiplican las veces q se ejecutan las instrucciones


bucles anidados independientes: condiciones de salida que no están relacionadas. 

bucles anidados dependientes: si el número de iteraciones de los bucles internos depende de los externos y sus variables de control.

======
INSTRUCCIONES DE SALTO: break / continue 

permiten terminar un bucle / iteración antes de que lo determine su condición de salida. 
rompen la secuencia natural / pueden dificultar la legibilidad
uso desaconsejado 

	- break: interrumpe la ejecución del bucle y continúa en la siguiente instrucción. 
		si es un b. anidado, sólo interrumpe el bucle actual, no necesariamente los externos.

		- continue: interrumpe la iteración actual del bucle y e inicia una nueva ejecución del cuerpo. si es un for, la ejecución salta a ejecutar la zona de incremento.

USOS JUSTIFICADOS: 
	- salir completamente para evitar iteraciones innecesarias 
	- omitir  valores y cálculos innecesarios.

==============

2.3. FUNCIOM 



función: conjunto de instrucciones que realiza una tarea específica, se identifica por nombre unico y opcionalmente devuelve un valor

método: igual en POO - conjunto  de  instrucciones dentro  de  una  clase,  que  realizan  una  determinada tarea y a las que podemos invocar mediante un nombre. (Math.sqrt(),System.out.println(); )


Estructura general de una función
public static void FuncionEjemplo (parametros)
{ return valorRetorno; }

	- modificadores: Indican nivel de acceso y  características (e.g., static). // public / private static
	- tipo: el tipo de dato que devuelve. ( void si no devuelve nada)
	- nombre: camelCase
	- parametros: valores necesarios para que la función funcione
	- return: devuelve un valor a donde se llamo 

DEFINICIONES: 
	- Prototipo: linea inicial que especifica nombre, tipo, parámetros, y modificadores > conocer cómo usar la función sin saber su implementación.
	- Definición: prototipo y  cuerpo de la función.
	- Llamada: uso dentro de programa (nombre+param) ===========

PARAMETROS: 

Parámetros: valores que una función necesita para realizar su tarea.
		- parametros actuales: se pasan en la llamada
		- parametros formales: los q recibe la variable en la definicion 
tienen que coincidir en numero, orden y tipo 
=========

AMBITO DE VARIABLES: 
	rango de accesibilidad de una variable.

Tipos de variables según su ámbito de declaracion:
	de clase: fuera, accesibles para toda la clase 
	locales: dentro de metodo, acessibles por el 
	de bloque: dentro de bloque, accesible dentro 

Paso de parámetros: pasar valores a una función.
	formas principales:
		- por valor (JAVA): se pasa una copia del valor y las modificaciones en la funcion no afectan al valor original 
		- por referencia: se pasa la dir. de memoria y las modificaciones si afectan al valor original


Valor devuelto (return)
	- si la función tiene un tipo de retorno, es obligatorio usar return.
Si el tipo es void, no es necesario usar return, aunque puede utilizarse para finalizar anticipadamente.
Buenas prácticas:
Reducir el número de sentencias return en una función para aumentar la claridad.
Sobrecarga de funciones
Definición:
Es la capacidad de definir varias funciones con el mismo nombre, siempre que difieran en el número o tipo de parámetros.
Ejemplo:

public int suma(int a, int b) {
    return a + b;
}
public double suma(double a, double b) {
    return a + b;
}
Recursividad
Definición:
Técnica en la que una función se llama a sí misma para resolver un problema.
Se basa en dos elementos clave:
Caso base: Condición que detiene las llamadas recursivas.
Llamada recursiva: Invocación de la función dentro de sí misma.
Ventajas:
Útil para problemas con estructuras repetitivas, como el cálculo de factoriales o el recorrido de árboles.
Desventajas:
Consume más memoria y puede ser menos eficiente que la iteración.
Ejemplo: Factorial
java
Copiar código
public static long factorial(int n) {
    if (n == 0) return 1;
    return n * factorial(n - 1);
}
Buenas prácticas
Definición clara: Describir lo que la función debe hacer.
Entradas y salidas:
Identificar los datos que necesita y devolverá.
Tamaño reducido:
Limitar el cuerpo de una función a aproximadamente 10 líneas.
Pruebas:
Diseñar casos de prueba para verificar su funcionalidad.
Nombres descriptivos:
Usar nombres que reflejen su propósito.
Optimización:
Evitar funciones redundantes o demasiado complejas.

2.4.  Excepciones.
Conceptos básicos
excepciones: posibles errores durante la ejecución de un programa.

Provocadas por: 


leer por teclado un dato distinto al esperado
división por cero
acceso a array o String fuera de rango
error al abrir un fichero/ BD
memoria disponiblen´t
problemas de Hardware



control de excepciones: try-catch-finally
permite al programador interceptarlas, controlando la ejecución del programa para evitar que este falle. 
try{
     //Instrucciones si se produce una                                                       excepción
}
catch(tipoExcepcion e){
     //Instrucciones para tratar esta excepción
}
catch(otroTipoExcepcion e){
     //Instrucciones para tratar esta excepción
}
     //tantos catch como sean necesarios
finally{
     // instrucciones que se ejecutarán siempre                                          
     // se haya producido o no una excepción
}


Tipos de excepciones
existen muchos tipos de excepciones y podemos crear las nuestras propias

excepciones marcadas o comprobadas (checked) : Java revisa en tiempo de compilación  > nos obliga a capturar para poder ejecutar

excepciones no marcadas (unchecked): no son comprobadas por Java > opcionales y para dar robustez
Declarar Excepciones
Podemos declarar las excepciones que puede lanzar un método escribiendo en el prototipo del método la palabra throws seguida del nombre de las excepciones separadas por comas. 

Ejemplo:

import java.io.IOException;

public class DeclararExcepcion {
    public static void main(String[] args) throws IOException {
        char car;
        System.out.println("Introduce un carácter");
        car = (char) System.in.read();
        
        System.out.println(car);
    }
}


El método System.in.read() puede arrojar una excepción comprobada de tipo IOException. En lugar de controlar esa posible excepción con un try...catch podemos declararla en el prototipo del método con throws.

Esta declaración nos permite escribir métodos que no capturan las excepciones marcadas que se puedan producir. La idea es que estas excepciones así declaradas sean tratadas en el código desde el que se invocó a este método o desde algún otro método de la pila de llamadas.
Lanzar una excepción
Java permite al programador lanzar excepciones mediante la palabra reservada throw.

throw objetoExcepcion;


La excepción que se lanza es un objeto, por lo que hay que crearlo como cualquier otro objeto mediante new.

Si se lanza una excepción comprobada habrá que declararla en el prototipo del método con la cláusula throws.

Ejemplos:

public class ThrowExample {
    public static void main(String[] args) {
        try {
            checkAge(15);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    static void checkAge(int age) throws Exception {
        if (age < 18) {
            throw new Exception("Age must be 18 or older.");
        }
    }
}



Anexo. Buenas Prácticas
mensajes significativos y descriptivos al lanzar excepciones > facilitar depuración.
utilizar excepciones comprobadas para condiciones recuperables y excepciones no comprobadas (en tiempo de ejecución) para errores de programación.
excepciones personalizadas > condiciones de error específicas en tu aplicación > código sea más legible y fácil de mantener.
Evita el uso excesivo
Documentar >  @throws Javadoc.

