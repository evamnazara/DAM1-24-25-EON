Cálculo de complexidade ciclomática
Fórmula:
V(G) = E - N + 2P
	•	E (aristas) = 9
	•	N (nodos) = 8
	•	P (componentes conectados) = 1
V(G) = 9 - 8 + 2(1) = 3
Otra forma:
V(G) = NP + S = 3 + 1 = 4
Donde:
	•	NP (nodos de decisión) = 3 (if-else)
	•	S (nodos de salida) = 1
2.2. Camiños independentes
	1.	Camino 1: Edad inválida → excepción
	2.	Camino 2: Edad ≤ 12 → “Infantil”
	3.	Camino 3: Edad 13-17 → “Adolescente”
	4.	Camino 4: Edad 18-64 → “Adulto”
	5.	Camino 5: Edad ≥ 65 → “Senior”


     (Inicio)
        |
        v
   [N1] Verificar edad válida (age < 0 || age > 120)
    /   \
(Sí)    (No)
 |       |
Excepción  v
          [N2] ¿age ≤ 12?
         /   \
      Sí     No
      |       |
"Infantil"  [N3] ¿age ≤ 17?
          /   \
       Sí     No
       |       |
"Adolescente" [N4] ¿age < 65?
             /   \
          Sí     No
          |       |
    "Adulto"   "Senior"


2.3. Probas de caixa negra
Clases de equivalencia

Condición de entrada
Clases válidas
Clases inválidas
Edad negativa
-
-1
Infantil (0-12)
0, 5, 12
-5, 13
Adolescente (13-17)
13, 15, 17
12, 18
Adulto (18-64)
18, 30, 64
17, 65
Senior (≥65)
65, 90, 120
121, 130

Edad
Salida esperada
-1
Excepción
0
“Infantil”
12
“Infantil”
13
“Adolescente”
17
“Adolescente”
18
“Adulto”
64
“Adulto”
65
“Senior”
120
“Senior”
121
Excepción
Probas realizadas
	•	Probas de caixa branca:
	•	Grafo de fluxo
	•	Complexidade ciclomática: 4
	•	Camiños independentes: 5
	•	Probas de caixa negra:
	•	Clases de equivalencia y valores límite


import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

class AgeClassifierTest {

    @Test
    void testInfantil() {
        assertEquals("Infantil", AgeClassifier.classify(0));
        assertEquals("Infantil", AgeClassifier.classify(5));
        assertEquals("Infantil", AgeClassifier.classify(12));
    }

    @Test
    void testAdolescente() {
        assertEquals("Adolescente", AgeClassifier.classify(13));
        assertEquals("Adolescente", AgeClassifier.classify(15));
        assertEquals("Adolescente", AgeClassifier.classify(17));
    }

    @Test
    void testAdulto() {
        assertEquals("Adulto", AgeClassifier.classify(18));
        assertEquals("Adulto", AgeClassifier.classify(30));
        assertEquals("Adulto", AgeClassifier.classify(64));
    }

    @Test
    void testSenior() {
        assertEquals("Senior", AgeClassifier.classify(65));
        assertEquals("Senior", AgeClassifier.classify(90));
        assertEquals("Senior", AgeClassifier.classify(120));
    }

    @Test
    void testEdadInvalida() {
        assertThrows(IllegalArgumentException.class, () -> AgeClassifier.classify(-1));
        assertThrows(IllegalArgumentException.class, () -> AgeClassifier.classify(121));
    }
}



________


import java.util.List;
import java.util.Objects;

public class Pregunta {
    private String enunciado;
    private List<String> respuestas;
    private int respuestaCorrecta;

    // Constructor
    public Pregunta(String enunciado, List<String> respuestas, int respuestaCorrecta) {
        if (respuestas == null || respuestas.size() < 2) {
            throw new IllegalArgumentException("Debe haber al menos 2 respuestas diferentes.");
        }
        if (respuestaCorrecta < 0 || respuestaCorrecta >= respuestas.size()) {
            throw new IllegalArgumentException("Índice de respuesta correcta no válido.");
        }
        this.enunciado = enunciado;
        this.respuestas = respuestas;
        this.respuestaCorrecta = respuestaCorrecta;
    }

    // Método corregir()
    public boolean corregir(int opcionElegida) {
        return opcionElegida == respuestaCorrecta;
    }

    // Método toString()
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(enunciado + "\n");
        char opcion = 'a';
        for (String respuesta : respuestas) {
            sb.append(opcion).append(") ").append(respuesta).append("\n");
            opcion++;
        }
        return sb.toString();
    }

    // Método equals()
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Pregunta otra = (Pregunta) obj;
        return Objects.equals(enunciado, otra.enunciado) &&
               Objects.equals(respuestas, otra.respuestas);
    }

    @Override
    public int hashCode() {
        return Objects.hash(enunciado, respuestas);
    }
}


DOS

import java.util.HashSet;
import java.util.Set;

public class Examen {
    private String titulo;
    private Set<Pregunta> preguntas;

    // Constructor
    public Examen(String titulo) {
        this.titulo = titulo;
        this.preguntas = new HashSet<>();
    }

    // Método addPregunta()
    public boolean addPregunta(Pregunta pregunta) {
        return preguntas.add(pregunta); // HashSet evita duplicados
    }

    // Método numPreguntas()
    public int numPreguntas() {
        return preguntas.size();
    }

    // Método toString()
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Examen: " + titulo + "\n");
        int num = 1;
        for (Pregunta pregunta : preguntas) {
            sb.append(num).append(". ").append(pregunta.toString()).append("\n");
            num++;
        }
        return sb.toString();
    }
}
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        // Crear preguntas
        Pregunta p1 = new Pregunta("¿Cuál es la capital de Francia?", 
                Arrays.asList("Madrid", "París", "Berlín"), 1);
        Pregunta p2 = new Pregunta("¿Cuánto es 2 + 2?", 
                Arrays.asList("3", "4", "5"), 1);

        // Crear examen
        Examen examen = new Examen("Examen de Cultura General");
        examen.addPregunta(p1);
        examen.addPregunta(p2);

        // Imprimir examen
        System.out.println(examen);

        // Probar corrección de preguntas
        System.out.println("Respuesta a la primera pregunta (índice 1): " + p1.corregir(1)); // true
        System.out.println("Respuesta a la primera pregunta (índice 0): " + p1.corregir(0)); // false
    }
}





