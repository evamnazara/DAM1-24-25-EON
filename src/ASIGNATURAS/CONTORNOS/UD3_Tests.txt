EXAMEN MARTES 18 

notas: 
  ver tests corregidos -- estan mal todos 
  como ver la cobertura en vscode  -- hay un desplegable que se llama test coverage 

DOCUMENTOS: 
    1. UD3. 705 lineas original
    2. preguntas de practica
    3. PRUEBAS UNITARIAS JUNIT - 

UD3. Deseño e realización de Probas 
 
1. INTRODUCCION 

probas: tarefas do ciclo de vida do software 
    obxectivo fundamental: detección de erros que se cometeron antes de que este se entregue ao cliente. 
    obxectivo real: detección de defectos, non demostrar que non ten ningún. 
        > imposible probar exhaustivamente > pretende realizar probas sen un esforzo excesivo 
        pero con alta probabilidade de que detecten erros. 
        

2. ESTRATEXIA DE PROBAS DO SOFTWARE 

comezan polos compoñentes máis pequenos (métodos, clases, paquetes, etc.) > incrementan de xeito progresivo o alcance da proba. 
    catro tipos de probas secuenciais
        > de unidade
        > de integración
        > de sistema
        > de validación

    2.1. PROBAS DE UNIDADE
        PRUEBAS DE CAJA NEGRA Y DE CAJA BLANCA 

    Comezase probando módulos individuais ou clases
        > nas clases, tamén haberá que realizar probas a nivel de método
            > para cada método non trivial haberá que comprobar o seu comportamento.  

    eliminar erros na interface e na lóxica interna > Utilízanse técnicas de caixa negra e caixa branca.  
    
    Fanse probas sobre: 
    1.  interfaz do módulo > asegura que a información flúe adecuadamente. 
    2.  estruturas de datos locais > asegura a integridade en todos o proceso
    3.  condicións límite > asegura que funcionan correctamente 
    4.  camiños independentes da estrutura > todas as sentenzas se executan polo menos unha vez. 
    5.  Todos os camiños de manexo de erros. 
    
    ferramentas para automatizar probas unitarias: JUnit, CPPUnit, PHPUnit, PyUnit...

    2.2. Probas de integración 
    ●  Pruebas de Integración: qué son, tipos y ejemplos  
    
    As probas de integración teñen como obxectivo verificar que os distintos módulos ou 
    compoñentes dun programa funcionan correctamente cando se integran entre si para 
    resolver as distintas funcionalidades do programa.  
    
    Consisten en combinar módulos ou compoñentes individuais previamente probados 
    mediante probas unitarias e avaliar o seu funcionamento conxunto. Estas probas céntranse 
    na comunicación e interacción entre os compoñentes, asegurándose de que non haxa 
    problemas de transferencia de datos, sincronización ou compatibilidade entre eles 
    
    Existen distintos enfoques para levar a cabo as probas: 
    1.  Big bang ou non incremental:  
    ○  Todos os compoñentes intégranse simultaneamente e próbanse como unha 
    única unidade. 
    ○  Útil para sistemas pequenos, pero pode dificultar identificar a causa dos erros 
    en sistemas complexos. 
    2.  Integración incremental: Os módulos intégranse e próbanse en pequenos 
    segmentos, neste caso os erros son máis fáciles de localizar. 
    ○  Ascendente (Bottom-up). A construción e proba do programa empeza 
    dende os módulos inferiore e máis sinxelos da estrutura do programa. 
    ○  Descendente (Top-Down). A integración comeza no módulo principal 
    movéndose cara abaixo pola xerarquía de control. 
    3.  Probas baseadas en hebra: Estas probas están orientadas a sistemas que 
    empregan múltiples hebras ou threads para executar tarefas concurrentes, como 
    sistemas operativos, aplicacións en tempo real, etc. 

    2.3. Probas do sistema 
    Este tipo de probas consiste no proceso de proba dun sistema integrado de hardware e 
    software para comprobar se cumpre cos requisitos especificados. 
    
    Existen distintos tipos de probas do sistema: 
    ●  Proba de recuperación. Fórzase o fallo do sistema e verifícase que a recuperación 
    se leva a cabo axeitadamente. 
    ●  Proba de seguridade. Esta proba intenta verificar que o sistema está protexido 
    contra accesos ilegais. 
    ●  Proba de esforzo, resistencia ou stress. Trata de enfrontar o sistema con 
    situacións que demandan gran cantidade de recursos, por exemplo, deseñando 
    casos de proba que requiran o máximo de memoria, incrementando a frecuencia de 
    datos de entrada que dean problemas e nun sistema operativo virtual, etc.  
    ●  Proba de rendemento: Proba que o sistema cumpla certos requisitos de 
    rendemento como, por exemplo, un tempo de resposta axeitado ante un evento. 
    ●  Proba de despliegue: Consiste en probar o funcionamento do sistema nas distintas 
    plataformas nas que se debe utilizar. Por exemplo, unha aplicación web debe 
    probarse en distintos navegadores e sistemas operativos, resolucións de pantalla, 
    etc. 

    2.4. Proba de validación 
    O obxectivo desta proba, tamén chamada proba de aceptación, é determinar se o software 
    é considerado válido por parte da persoa usuaria e se está preparado para a súa 
    implantación. 
    
    Lévanse a cabo unha serie de probas de caixa negra que demostran a conformidade cos 
    requisitos. As técnicas que se empregarán son: 
    ●  Proba Alfa. Lévanse a cabo polo cliente ou usuario no lugar de desenvolvemento. O 
    cliente utiliza o software de forma natural baixo a observación do desarrollador, que 
    irá rexistrando os erros e os problemas de uso. 
    ●  Proba Beta. Lévase a cabo polos usuarios finais do software no seu lugar de 
    traballo. O desarrollador non está presente. O usuario rexistra todos os problemas 
    que atope, reais e/ou imaxinarios. Modifícanse e prepárase unha nova versión do 
    produto. 
    
    Todas estas probas se amosan no seguinte Modelo en V, que é unha variante do modelo en 
    cascada, onde se relaciona cada fase do ciclo de vida do software coa fase de probas 
    asociada.  
    
 
3. TECNICAS DE DISEÑO DE CASOS DE PRUEBA 

tipos de técnicas de deseño: 
 
1.  Pruebas de caja blanca / pruebas estructuraleS: examinan los detalles de cada módulo > NECESARIO CODIGO 
  con el código, se prueban caminos, bucles y varianles

generan casos de proba que: 
      > garantizan que todas las rutas posibles se revisen 
      > revisan las decisiones logicas y sus lados verdadero y falso 
      > todos los bucles se ejecutan 
      > revisa y valida las estructuras de datos internas 
 
2. pruebas de caja negra / pruebas funcionales: validan los requisitos funcionales. > NO ES NECESARIO CODIGO
  considera el programa como una caja negra con una serie de entradas que proporciona salidas. 

      > se llevan a cabo sobre la interfaz del software
      > obtienen casos de prueba demuestren que todo va ok 
 
Probas de código: consiste en ejecutar un programa para encontrar errores. 

3.1. PRUEBA DE CAMINO BÁSICO - caja BLANCA 

Obtiene el valor de COMPLEJIDAD CICLOMÁTICA. 
Permite diseñar todos sus caminos de ejecución y crear los casos de prueba que los recorran. 

cuatro fases: 
      > grafo de flujo
      > cálculo de complejidad ciclomatica
      > conjunto de caminos independientes
      > creación de casos de prueba 

3.1.1. GRAFO DE FLUJO
 
el grafo muestra el recorrido do control lóxico do programa 
    > nodos: cada instrucción, asignación de valores y cada parámetro + nodo inicio + nodo fin 
    > el paso de una instruccion a otra es una arista 
 
un nodo == rombo en psint

Condiciones
    > cada condicion es un nodo con una arista por cada opción 
    > si son varias (and / or) se tratan como independientes y anidadas 

   AND: cada operando es un nodo >> se valora en cascada si son true 
   OR: igual, pero valora en cascada si alguno es false // si 1 true, entra // si 2 false, salta a contrario  
 
Instruciones alternativas; dos ramas si if-else o varias si un switch
    SWITCH: si están combinados se cuenta como uno, si no tienen break se enlazan
 
Bucles : el flujo entra y vuelve según la condición
    WHILE: nodo e interior conectados del segundo al primero y del primero al siguiente si no se cumple la condición 
    DO WHILE: el primero entra al cuerpo y luego se valora la condición  
    FOR: hay un nodo de asignación i, nodo de condicion, cuerpo y de incremento que vuele a condicion, si no, va al siguiente
 

 
Parámetros de entrada 
Os propios parámetros de entrada dun método forman un nodo conxunto, xa que a 
obtención destes é unha instrución. 
 
Asignacións e declaracións 
As asignacións de valores conforman un nodo e agrúpanse se están de forma conxunta. 
As declaracións óbvianse ou se estipulan no mesmo nodo que a primeira asignación, 
formando parte do nodo. 
 
Entradas e saídas 
As entradas e saídas conforman un nodo, podendo agruparse se son consecutivos. 
 
Return 
Cada return é un nodo en si mesmo, independentemente de se devolve directamente un 
valor ou unha variable. 
 
3.1.2. COMPLEJIDAD CICLOMÁTICA

1.  CC = Número de regiones del grafo
2.  CC = aristas - nodos + 2 
3.  CC = Nodos predicado + 1 
 
1. Unha vez debuxado o diagrama, contar o número de áreas creadas (zonas rodeadas de 
aristas) e sumarlle unha (exterior), deixando claro a irrelevancia dos elementos lineais. 
 
Considérase unha rexión como unha zona do grafo 
pechada. Tamén se considera rexión a parte externa. 
 
V(G) = número de rexións = 3 
 
2. Outra forma de facer o cálculo, e contar o número de aristas, restarlle o número de nodos e sumarlle 2. 
Hai que ter en conta que, todos os elementos lineais, é dicir, aqueles que non crean ramas, achegan 1 
nodo e 1 arista, polo que dá igual o número deles que haxa, xa que, segundo a fórmula da complexidade, a cada arista se lle resta un nodo. 

3. A complexidade pódese calcular contando os nodos predicado, aqueles dos que sae máis dunha 
arista, e sumarlle 1. 
Neste caso hai 2 nodos dos que saen máis de dúas aristas, nodo (2) e nodo (3,4,5).  
 
V(G) = 2 + 1 = 3 
 
O valor da complexidade ciclomática permite avaliar o risco do código analizado. 
 
Complexidade   Avaliación do risco 
1-10  Código ben estruturado. Capacidade de testeo alta. Custo e esforzo baixo 
11-20  Código complexo. Capacidade de testeo media. Custo e esforzo medio 
21-50  Código moi complexo. Capacidade de testeo baixa 
>50  Non testeable. Custo e esforzo alto Risco segundo a complexidade ciclomática 
 
3.1.3. Camiños independentes 
O valor de complexidade ciclomática V(G), da o número de camiños independentes do conxunto básico dun programa. Un camiño independente é calquera camiño do programa que introduce, polo menos, un novo conxunto de sentenzas de proceso ou unha condición.  
 
En termos do diagrama de fluxo, un camiño independente está constituído polo menos por unha arista que non teña sido recorrida anteriormente por outro camiño.  
 
Neste caso, un grupo de camiños independentes sería: 
 
3.1.4. Obtención dos casos de proba 
O último paso da proba do camiño básico é construír os casos de proba forzan a execución de cada camiño. Co fin de comprobar cada camiño, débense escoller os casos de proba de xeito que as condicións dos nodos predicado estean adecuadamente establecidas. 

Probas de bucles 
 
Os bucles ou estruturas repetitivas constitúen unha estrutura de control fundamental en 
toda linguaxe de programación. As probas de bucle céntranse exclusivamente neste tipo 
de estruturas. Os casos de proba que se deben xerar para cada tipo de bucle son os 
seguintes: 
 
Bucles simples: se o número máximo de iteracións a través do bucle é n, deberían 
probarse os seguintes casos: 
1.  Salta o bucle por completo. 
2.  Realiza unha iteración a través do bucle. 
3.  Realiza dúas iteracións a través do bucle. 
4.  Realiza m iteracións a través do bucle, con m < n. 
5.  Realiza n-1, n e n+1 iteracións a través do bucle. 
 
Bucles anidados: deben realizarse os seguintes pasos: 
1.  Comeza co bucle máis interno, establecendo valores mínimos para todos os 
demais bucles. 
2.  Realiza probas sinxelas de bucle para o bucle máis interno, mantendo os bucles 
exteriores nos seus valores mínimos. 
3.  … 
3.2. Particións ou clases de equivalencia 
A partición equivalente é un método de proba de caixa negra que divide os valores dos 
campos de entrada dun programa en clases de equivalencia. 
 
Unha clase de equivalencia é un conxunto de datos de entrada que comparten o mesmo 
comportamento ou esperan o mesmo resultado, que definen estados válidos e non 
válidos do sistema. 
 
Exemplo: Una conta de aforros ten diferentes taxas de interese dependendo do saldo da 
conta. Para unha conta cun saldo entre 0€ e 100 € xera o 3%, se a conta está entre 100,01€ 
e 1000€ o interese é o 5% e un 7% se a conta está por riba dos 1000€. 
 
 
 
Obtéñense a partir das condicións de entrada descritas nas especificación. 
●  Clase válida: xera un valor esperado 
●  Clase non válida: xera un valor inesperado 
 
As condicións de entrada veñen representadas por sentenzas na especificación. 
 
Un valor específico  “..Introducir cinco valores..” 
Un conxunto de valores relacionados  “..Palabras reservadas nunha linguaxe ..” 
Un rango de valores  “..Valores entre 0 e 10..” 
Unha condición lóxica  Condición “..debe ser..” 
 
As clases de equivalencia defínense segundo unha serie de directrices: 
●  Se unha condición de entrada especifica un rango, defínese unha clase de  equivalencia válida e dúas non válidas. Exemplo de rango: a nota debe ter un valor 
entre 1 e 10. 
●  Se unha condición require un valor específico, defínese unha clase equivalente 
válida e dúas non válidas. Exemplo de valor específico: o número de departamento 
pode ser branco ou ter dous díxitos. 
●  Se unha condición de entrada especifica un membro dun conxunto, defínese unha 
clase equivalente válida e unha non válida. Exemplo, o curso pode ter os seguintes 
valores: “DAM1”, “DAM2”, “SMR1” e “SMR2”. 
●  Se unha condición de entrada é unha condición lóxica, defínese unha clase de 
equivalencia válida e unha non válida. Exemplo de entrada lóxica: o salario debe ser 
maior que 0. 
●  Se se sabe que algúns elementos dunha clase non se tratan de igual forma que o 
resto dos seus elementos, débese dividir dita clase de equivalencia en varias clases 
menores. 
 
A seguinte táboa resume o número de clases de equivalencia válidas e non válidas que hai 
que definir para cada tipo de condición de entrada. 
 
 
Condicións de entrada  Nº de clases de equivalencia válidas  Nº de clases de equivalencia 
non válidas 
Rango   1 clase que contemple los valores del 
rango (1) 
2 clases non válidas 
1 valor por encima do rango (2) 
1 valor por debaixo do rango (3) 
Valor específico  1 clase que contemple dicho valor (4)  2 clases non válidas 
1 valor por encima (5) 
1 valor por debaixo (6) 
Membro de un conxunto  1 clase de equivalencia por 
cada elemento (7) 
1 clase non válida 
1 elemento fora do conxunto (8) 
Lóxica   1 clase que cumpra a condición (9)  1 clase non válida 
1 valor que non cumpra a 
condición (10) 
 
Para a creación dos casos de proba lévanse a cabo os seguintes tres pasos: 
1.  Asignar un número a cada clase de equivalencia (na táboa anterior entre 
parénteses). 
2.  Crear o número mínimo de casos de proba que inclúan todas as clases válidas. 
3.  Crear un caso de proba por cada clase non válida. O caso de proba debe incluír 
unha clase non válida e todas as demais clases debe ser válidas.  


3.3. ANÁLISIS DE VALORES LÍMITE 
basada en que los errores son mas probables en los valores limites o extremos de las entradas.

  Complementa a técnica das particións equivalentes pero ten algunhas diferencias: 
      1. no selecciona cualquier valor de la clase, si no los que están justo en los límites
      2. no se centra solo en las de entrada, también en las de salida 
 
 
Reglas para generar casos de prueba: 
  1.  condición de entrada de intervalo de valores (-5, 10) 
        > casos válidos para los dos extremosi
        > inválidos justo por encima (-5,01 - 10,01 // -6 - 11) 
 
  2. condición de entrada especifica un número de valores  (entre 1 e 100)
        > valores mínimos y máximos 
        > uno menos que el mín - uno más del max 
 
  6.  si la E/S es un conjunto de datos ordenador con limites (array de 100 el)
        > probar incluyendo el primer y el ultimo elemento  


================ 
4. DOCUMENTACIÓN 

conveniente para unha boa organización e para asegurar a súa reutilización. Hai que documentar tanto o deseño das probas como o resultado da súa execución. 

estándar IEEE 829-1998: conxunto de documentos a producirse durante la prueba.
  > plan de pruebas: planificación general (alcance, enfoque, recursos, calendario...) incluye tareas a realizar, responsables y riesgos
  > especificación de pruebas
      > especificación de casos de prueba
      > especificación de procedimientos de prueba 

  > informes de pruebas 
    > histórico de pruebas: hechhos relevantes (fechas, contorno, elementos, resultados) 
    > informe de incidentes: eventos producidos durante la ejecución
    > informe resumen

=======================
  5. HERRAMIENTAS DE DEPURACIÓN 

depuración: evalúan los resultados de la ejecución y comprueba que se corresponda (lo que esperaba vs lo que da)
 
resultados posibles:
  1. se encuentra error > se corrige > se elimina 
  2. no se encuentra error > se hacen pruebas y se repiten hasta encontrarlo 
    > probas de regresión, repetición selectiva de probas para detectar fallos introducidos 
 
tipos xerais de erros: erros de compilación e erros lóxicos. 
  ●  de compilación > suele encargarse el IDE de marcarlo 
  ●  lóxicos / bugs: no impiden que compile pero provocan resultados incorrectos 
      > debugger: analiza el programa mientras ejecuta > pone valores a las variables y los compara 
___________
5.1. EJECUCION PASO A PASO 

formas de depuración: 
  ● ejecución paso a paso: liña por liña para buscar e corrixir erros lóxicos.  
  ● ejecución paso a paso por procedementos: ejecuta un método ou función completamente. 
    útil cando xa comprobamos que un procedemento funciona correctamente e só nos interesa o valor que devolve. 
  ● execución ata unha instrución: depurador executa o programa > se detiene en un punto > depura a partir de ahi 
  ● execución ata o final: no detiene en instrucciones intermedias 
___________
5.2. PUNTOS DE RUPTURA // BREAKPOINTS 

nos interesa cuando no hay que probar todo si no solo un punto concreto 

opcións de depuración > selecciónase a liña onde queremos que pare para a partir dela, inspeccionar variables, ou realizar unha execución paso a paso, para verificar a  corrección do código. 

  
puntos de ruptura: marcadores que poden establecerse en calquera liña de código executable
  > pódense examinar as variables, e comprobar que os valores asignados son correctos
  > iniciar depuración paso a paso

despues de la comprobación, podemos abortar o programa, ou continuar a execución normal do mesmo. 
___________
5.3. EXAMINAR VARIABLES

Mentres o código se analiza, se pueden ver tipos e contidos das variables según avanza o programa, y también cambiar o valor das variables
 
examinadores de variables > inician depuración, normalmente coa execución paso a paso, o programa avanza instrución por instrución. Ao mesmo tempo, as distintas variables, van tomando diferentes valores. Cos examinadores de variables, podemos comprobar os distintos valores que adquiren as variables, así como o seu tipo. Esta ferramenta é de gran utilidade para a detección de erros. 
