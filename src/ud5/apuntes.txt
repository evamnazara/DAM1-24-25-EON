UD05.2.POO.Herencia 
Apuntes 
DAM1-Programación 2024-25 
 
Herencia. Conceptos Básicos  1 
8.1. Subclase y superclase  2 
8.2. Modificador de acceso para herencia  3 
8.3. Redefinición de miembros heredados  4 
8.3.1. super y super()  6 
8.3.2. Selección dinámica de métodos  7 
La clase Object  11 
Clases abstractas  16 
Anexo. Clases Internas  20 
 
Otras fuentes: 
●  Programación Java: Teoría  
○  Herencia en Java 
○  Método abstracto 
○  Polimorfismo. Concepto y ejemplo de Polimorfismo en Java  
●  Universitat Politècnica de València - UPV 
○  La herencia en Java |  | UPV  
○  El polimorfismo en Java |  | UPV  
●  Relaciones entre clases: Asociación y Herencia: 
○  (Programación en Java: Fundamentos de programación y principios de 
diseño) 
○  Relaciones entre clases (diagramas de clases UML) 
○  Relación de ejercicios 
●  draw.io  
●  Creador gratuito de diagramas UML| Lucidchart 
●  Lucid para la Educación | Lucidchart   
Herencia. Conceptos Básicos 
La herencia es una de las grandes aportaciones de la POO y permite, igual que en la vida 
real, que las características pasen de padres a hijos. Cuando una clase hereda de otra, 
adquiere sus atributos y métodos visibles, permitiendo reutilizar el código y las 
funcionalidades, que se pueden ampliar o extender. 
 
La clase de la que se hereda se denomina clase padre o superclase, y la clase que hereda 
es conocida como clase hija o subclase.  
  
8.1. Subclase y superclase 
Una subclase dispone de los miembros heredados de la superclase y, habitualmente, se 
amplía añadiéndole nuevos atributos y métodos. Esto aumenta su funcionalidad, a la vez 
que evita la repetición innecesaria de código. En la API, por ejemplo, la mayoría de las 
clases no se definen desde cero. Por el contrario, se construyen heredando de otras, lo que 
simplifica su desarrollo. En realidad, todas las clases de Java heredan de la clase 
Object, definida también en la API. 
 
La forma de expresar cuál es la superclase de la que heredamos es mediante la palabra 
reservada extends, de la forma 
 
class SubClase extends SuperClase ( 
 
} 
 
Veamos un ejemplo: supongamos que disponemos de la clase Persona (nombre, edad y 
estatura) y necesitamos construir la clase Empleado. Un empleado, para nuestra 
aplicación, será una persona con un salario.  
 
Vamos a definir Empleado heredando de Persona. Esto hará que adquiera todos sus 
miembros, que no es necesario escribir de nuevo. De momento añadiremos el atributo 
salario y un constructor. 
 
class Persona { 
    String nombre; 
    byte edad; 
    double estatura; 
} 
 
class Empleado extends Persona { 
    double salario; 
 
    Empleado (String nombre, byte edad, double estatura, double salario){ 
 
    } 
} 
 
 Al crear un objeto de la clase Empleado disponemos de los atributos nombre, estatura y 
edad, además de los métodos que se hubieran definido en Persona y de los miembros 
propios salario y un constructor, añadidos en la definición de Empleado.  
 
Empleado e = new Empleado ("Sancho", 25, 1.80, 1725.49); 
 
System.out.println(e.nombre);  //muestra un atributo heredado 
System.out.println(e.salario); //muestra un atributo propio 
 
El mecanismo de la herencia puede continuar ampliando la biblioteca de clases a partir de 
las existentes. En nuestro ejemplo, podemos definir, a partir de Empleado, la clase Jefe, 
que no es más que un empleado con unas propiedades añadidas. 
 
Existen lenguajes de programación, como C++, que permiten que una clase herede de más 
de una superclase, lo que se conoce como herencia múltiple. Java solo permite herencia 
simple, donde cada clase tiene como padre una única superclase, cosa que no impide que, 
a su vez, tenga varias clases hijas. 
 
Los términos subclase y superclase son relativos. Una clase es subclase de otra si hereda de ella 
por medio de la palabra clave extends en su declaración. Automáticamente esta última es 
superclase de la primera. Una clase puede ser a la vez subclase de una clase y superclase de 
otras. 
8.2. Modificador de acceso para herencia 
Una subclase hereda todos los miembros de su superclase salvo los private, que no 
son accesibles directamente en la subclase. No obstante, se puede acceder a ellos 
indirectamente con un método no privado. 
 
Con la herencia aparece un nuevo modificador de acceso, protected (que siginifica 
«protegido»), pensado para facilitar la herencia. 
 
Los miembros protegidos serán siempre visibles para las clases que hereden, 
independientemente de si la superclase y la subclase son vecinas o externas, aunque en 
este último caso habrá que importar la superclase. 
 
Visibilidad de un miembro protected. 
  
Un miembro protected es visible también en las clases vecinas. 
 
 
8.3. Redefinición de miembros heredados 
Cuando una clase hereda de otra, en alguna ocasión puede ocurrir que interese modificar 
algún atributo o redefinir un método. Este mecanismo se conoce como ocultación para los 
atributos y sustitución u overriding para los métodos. Consiste en declarar un miembro 
con igual nombre que uno heredado, lo que hace que este se oculte si es un atributo o se 
sustituya si es un método por el nuevo. 
 
Veamos cómo sustituir un método. Partimos de la superclase 
 
class Persona { 
    String nombre; 
    byte edad; 
    double estatura; 
 
    void mostrarDatos() { 
        System.out.println(nombre); 
        System.out.println(edad); 
        System.out.println(estatura); 
    } 
} 
 
A continuación definimos una nueva clase: 
 
class Empleado extends Persona (//Empleado hereda de Persona 
    double salario; //atributo propio 
} 
 
Nos encontramos que la clase Empleado dispone, heredado de Persona, del método 
mostrarDatos(), pero, en la práctica, este método no basta para mostrar la información 
de un empleado, ya que no muestra su salario. Una solución es redefinir el método en la 
clase Empleado.  
 
 Aunque es opcional, los métodos sustituidos en las subclases se suelen marcar con la 
anotación @Override, que indica que el método es una sustitución u overriding de un 
método de la superclase. 
 
Para sobreescribir un método de la superclase, es imprescindible que el que lo sustituye en 
la subclase tenga el mismo nombre, la misma lista de parámetros de entrada y el 
mismo tipo devuelto. En otro caso, si la lista de parámetros no es la misma, se trataría de 
una sobrecarga, y si el valor devuelto es distinto, podría producir un error de compilación. 
 
class Empleado extends Persona { 
    double salario; 
 
    @Override //significa: sustituye un método de la superclase 
    void mostrarDatos() { 
        System.out.println(nombre); 
        System.out.println(edad); 
        System.out.println(estatura); 
        System.out.println(salario); 
    } 
} 
 
 
Uso de miembros, heredados y propios 
 
Veamos ahora un ejemplo de ocultación. Supongamos que la estatura de un empleado 
definida como una longitud no es un dato relevante para la empresa, pero sí es interesante 
conocer la estatura como talla del uniforme. Redefiniríamos el atributo como un String que 
contenga la talla del uniforme: «XXL», «XL», «L», etcétera. 
 
class Empleado extends Persona ( 
    String estatura; //oculta a: la estatura de tipo byte 
 
} 
 
 8.3.1. super y super() 
●  super se utiliza para hacer referencia a miembros de la superclase. 
●  super() para hacer referencia constructores de la superclase. 
 
Del mismo modo que la palabra reservada this se utiliza para indicar la propia clase, 
disponemos de super para hacer referencia a la superclase de aquella donde se usa. 
 
Consideremos las siguientes clases: 
 
class SuperClase { 
    int a; 
    int b; 
 
    void mostrarDatos(){ 
    } 
} 
 
class SubClase extends SuperClase ( 
    String b; 
 
    void mostrarDatos() { 
    } 
} 
 
Como puede apreciarse, en Subclase se han redefinido el atributo b y el método 
mostrarDatos (). Cada vez que se escriba b en el código de SubClase estaremos 
utilizando un String, pero si deseamos utilizar el atributo b, de tipo entero, de Superclase, 
escribiremos super.b. 
 
Del mismo modo, para invocar el método mostrarDatos() de Superclase desde el código de 
Subclase escribiremos super.mostrarDatos(). Para el caso de Persona y Empleado, 
podríamos poner: 
 
public class Persona { 
    String nombre: 
    byte edad, 
    double estatura; 
 
    void mostrarDatos() { 
        System.out.println(nombre); 
        System.out.println(edad); 
        System.out.println(estatura); 
    } 
} 
 
class Empleado extends Persona { 
    double salario; 
 
    @Override 
    void mostrarDatos() { 
         super.mostrarDatos(); // método de superclase, muestra atributos de Persona 
        System.out.println(salario); // muestra el atributo añadido en Empleado 
    } 
} 
 
Algo análogo ocurre con los constructores. El método super() invoca un constructor de 
la superclase. Desde el constructor de la subclase, podemos invocar uno de la superclase 
para inicializar los atributos heredados de ella. En nuestro ejemplo, quedaría: 
 
public class Persona { 
    String nombre: 
    byte edad, 
    double estatura: 
 
    Persona (String nombre, byte edad, double estatura) { 
        this.nombre = nombre; 
        this.edad = edad; 
        this.estatura = estatura; 
    } 
    //… 
} 
 
class Empleado extends Persona { 
    double salario; 
 
    Empleado (String nombre, byte edad, double estatura, double salario) { 
        super (nombre, edad, estatura);  //constructor de Persona 
        this.salario = salario;    //atributo propio de Empleado 
    } 
} 
 
En caso de que el constructor de la superclase esté sobrecargado, podemos variar los 
parámetros de entrada de super() en número o tipo para hacerla coincidir con la versión que 
nos interese del constructor de la superclase. 
 
Una restricción de super() es que, si lo utilizamos, tiene que ser la primera instrucción 
que aparezca en la implementación de un constructor. 
 
Las subclases no heredan los atributos privados. Sin embargo, están ahí y son accesibles 
indirectamente a través de métodos públicos heredados. Además de esto, deben ser 
inicializados al crear un objeto de la subclase. Por ejemplo, si Persona tuviera el atributo 
privado nacionalidad, este tendría que ser inicializado de una forma u otra al crear un objeto 
de la clase Empleado, aunque esta no herede el atributo. Normalmente, nacionalidad 
aparecerá en la lista de parámetros del constructor de Persona y, en consecuencia, en el 
método super() cuando lo invoquemos desde el constructor de Empleado. 
8.3.2. Selección dinámica de métodos 
Cuando definimos una clase como subclase de otra, los objetos de la subclase son 
también objetos de la superclase. Por ejemplo, un objeto Empleado será, al mismo 
tiempo, un objeto de la clase Persona, ya que posee todos los miembros de Persona, 
además de otros específicos de Empleado. Esto no debe extrañar; ocurre lo mismo en el 
 mundo real: todo empleado es una persona. Por tanto, podemos referenciar un objeto 
Empleado usando una variable Persona. Por ejemplo 
 
Empleado e new Empleado(); 
Persona p = e; 
 
Al referenciar un objeto de una subclase, por ejemplo Empleado, con una variable de la 
superclase, por ejemplo de tipo Persona, solo serán visibles los miembros, tanto 
atributos como métodos, definidos en la superclase, es decir en la clase Persona.  
 
Cuando hay ocultación de atributos, los atributos accesibles son los definidos en la clase 
de la variable. Por tanto, si usamos la variable de tipo Persona referenciando un objeto 
Empleado, no se produce la ocultación. 
 
p.estatura  //atributo de Persona de tipo double 
 