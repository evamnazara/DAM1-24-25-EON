






Para este programa de Strings en java, resuelve el problema con variables legibles y funciones sencillas. Añade comentarios con los pasos que sigues, no utilices parseo de ningun tipo ni funciones como StringBuilder, ArrayList, Map... sólo Strings y Arrays simples y tipos primitivos). Añade souts donde sea necesario para darle sentido al programa y hacerlo amigables con el usuario.

/* 
El Pijote
Tiempo máximo: 1,000 s  Memoria máxima: 4096 KiB
El Quijote sobre el número pi
¿Se puede encontrar El Quijote entre los decimales del número π? La pregunta puede parecer extraña, expliquémonos. Ya sabes que los caracteres se pueden codificar con números, por ejemplo utilizando el código ASCII o UTF-8 o cualquier otro. Pues bien, si escribimos el número (bien largo) que consiste en la concatenación de los códigos de cada caracter del texto de El Quijote en ese mismo orden, ¿podríamos encontrar dicho número dentro de la lista de decimales del número π? Lo mismo podríamos preguntarnos con cualquier otro texto, como el del programa que resuelve este problema, o la concatenación de todos los programas que resuelven este problema.

Pues la respuesta es que no se sabe. Y dirás tú, "Ya me imaginaba". Pero el asunto no termina ahí. Los matemáticos han determinado las tres condiciones que debería cumplir la lista de decimales de π para que cualquier texto aparezca en algún lugar de esa lista. La primera es que sea tan grande como queramos. Eso es fácil, π tiene infinitos decimales. La segunda es que los decimales no tengan un patrón que se repita. Eso también es fácil, ya que π es un número irracional, que significa justamente eso. La tercera condición pide que la lista de decimales sea un número normal, que significa que cualquier número (de 1, 2, 3,… cifras) aparezca dentro de la lista de decimales el mismo número de veces (es decir, que no hay preferencia por ningún número). Pues bien, no se sabe si los decimales de π son un número normal o no (hay bastantes indicios de que sí, pero aún no se ha demostrado).

Si estás un poco decepcionado con la conclusión, no te preocupes, sí hay números que cumplen las tres condiciones. Por ejemplo, el número de Champernowne, que es el 0 seguido de los decimales formados concatenando todos los números naturales, 0,1234567891011121314151617…

Tranquilo, no te vamos a pedir que demuestres que los decimales de π son un número normal. Por ahora estamos interesados en una propiedad más sencilla: saber si una secuencia de esos decimales es subnormal, es decir, que aparecen en ella los dígitos del 0 al 9 el mismo número de veces. ¿Nos ayudas?

Entrada
La entrada está formada por una serie de casos de prueba. Cada caso consiste en una secuencia no vacía de hasta 1.000 dígitos del 0 al 9.

Salida
El programa escribirá una línea por cada caso de prueba. Si la secuencia dada es subnormal se escribirá subnormal y, en caso contrario, se escribirá no subnormal.

Entrada de ejemplo
 
314159
9876543210
00112233554466779898
Salida de ejemplo
no subnormal
subnormal
subnormal
*/ 

Para este programa de Strings en java, resuelve el problema con variables legibles y funciones sencillas. Añade comentarios con los pasos que sigues, no utilices parseo de ningun tipo ni funciones como StringBuilder, ArrayList, Map... sólo Strings y Arrays simples y tipos primitivos). Añade souts donde sea necesario para darle sentido al programa y hacerlo amigables con el usuario.

/* 
Esgritura
Tiempo máximo: 1,000 s  Memoria máxima: 4096 KiB
Montaje que recuerda al cuadro de Edvard Munch
Hoy en día se está perdiendo el uso del signo de exclamación al inicio de las frases. Quizá por el deseo de rapidez al escribir, por la influencia de otros idiomas (principalmente el inglés) o, simplemente, por pereza, mucha gente ha dejado de usar un símbolo único de nuestra lengua.

Resulta irónico que, por el contrario, a veces parezca que se compensa esta ausencia de los símbolos de apertura repitiendo el de cierre más allá de toda lógica.

Luis Piedrahita está siempre preocupado por encontrar palabras para dar nombre a los nuevos conceptos. Tras poner su atención en estos textos pródigos en signos de exclamación y parcos en contenido, ha propuesto para ellos la palabra esgritura, que define tal que así: "La esgritura es la acción o efecto de esgritar. Es la representación de conceptos o ideas, con más signos de exclamación que letras. Es un texto entusiasta; un grito escrito".

Estás desarrollando un nuevo sistema de mensajería instantánea y quieres detectar esgritos para ponerles un tamaño de fuente mayor, de acuerdo a su énfasis implícito. ¿Eres capaz de detectarlos?

Entrada
El programa deberá leer, de la entrada estándar, los mensajes recibidos desde el servidor por la aplicación de mensajería instantánea, cada uno en una línea. Estarán compuestos de entre 1 y 1.000 caracteres, formados únicamente por letras del alfabeto inglés, espacios, signos de exclamación (solo de cierre, por supuesto), y otros signos ortográficos.

Salida
Por cada línea de la entrada, el programa escribirá ESGRITO si el texto tiene más signos de exclamación que letras (del abecedario inglés), y escrito en caso contrario.

Entrada de ejemplo
Hola!!!!!
No puedo ir :(
22!
Uau!!!
Si!! Si!!!
:-O!!
Salida de ejemplo
 
ESGRITO
escrito
ESGRITO
escrito
ESGRITO
ESGRITO
*/ 

Para este programa de Strings en java, resuelve el problema con variables legibles y funciones sencillas. Añade comentarios con los pasos que sigues, no utilices parseo de ningun tipo ni funciones como StringBuilder, ArrayList, Map... sólo Strings y Arrays simples y tipos primitivos). Añade souts donde sea necesario para darle sentido al programa y hacerlo amigables con el usuario.

/* 
Camellos, serpientes y kebabs
Tiempo máximo: 1,000 s  Memoria máxima: 4096 KiB
GoodCode is_like_a GoodJoke it-needs-no-explanation
Lador, el "compi" con quien hago las prácticas de programación, me dice que hay que poner nombres de variables significativos, que ayuden a entender qué guarda cada una. Siempre me critica si uso identificadores como i, otra o aux.

Para darle un escarmiento, intenté poner una variable que se llamaba suma de los impares menores que n. Pero el compilador me gritó cosas muy feas que no entendí. Cuando preguntamos a la profesora nos dijo que no se podían poner espacios en los nombres. Si queríamos poner nombres con varias palabras (aunque nos dijo que no pusiéramos tantas) entonces teníamos que usar algún truco para que el nombre se leyera bien sin los espacios.

Nos contó que hay varias formas, y se usa una u otra dependiendo de las preferencias personales, o del convenio usado en el lenguaje. Y nos soltó un sermón sobre las mayúsculas del camello, serpientes y kebabs que nos dejaron muy confundidos. Buscando luego en Internet vimos que hay principalmente tres opciones:

CamelCase: la primera letra de cada palabra se escribe en mayúscula. Hay dos alternativas, UpperCamelCase y lowerCamelCase dependiendo de si la primera letra de la primera palabra va también en mayúscula o no. ¡Esta es la que más se utiliza!
snake_case: todas las letras van en minúscula, y las palabras se separan por un guión bajo (_). Se utilizaba en C, y todavía sobrevive en algunos sitios.
kebab-case: como antes, todas las letras van en minúscula, pero ahora las palabras se separan por un guión medio (-). En muchos lenguajes de programación no se puede usar, porque el - se confunde con el signo de la resta y no es válido. Se usa en Lisp (el lenguaje de los paréntesis).
Lo peor de todo fue que a Lador, después de que la profesora nos contara todo esto, se le ocurrió la feliz idea de preguntarle cuántos espacios utilizar para sangrar el código, y en qué línea colocar las llaves. Al final, terminamos perdiendo el autobús.

Entrada
Cada caso de prueba es un nombre de variable en alguna de las tres notaciones anteriores seguida de la notación a la que se quiere convertir (CamelCase, snake_case o kebab-case).

Ningún nombre de variable tendrá más de 20 caracteres y se garantiza que será correcta en alguna de las notaciones.

Salida
Para cada caso de prueba se escribirá el nombre de la variable en la notación solicitada. Tanto en la entrada como en la salida se utilizará UpperCamelCase (y no lowerCamelCase).

Entrada de ejemplo
MiVar snake_case
es_primo kebab-case
suma-de-impares CamelCase
j CamelCase
Salida de ejemplo
 
mi_var
es-primo
SumaDeImpares
J
*/ 

Para este programa de Strings en java, resuelve el problema con variables legibles y funciones sencillas. Añade comentarios con los pasos que sigues, no utilices parseo de ningun tipo ni funciones como StringBuilder, ArrayList, Map... sólo Strings y Arrays simples y tipos primitivos). Añade souts donde sea necesario para darle sentido al programa y hacerlo amigables con el usuario.

/* 
Abuelas falsas
Tiempo máximo: 1,000 s  Memoria máxima: 4096 KiB
Abuela mirando una foto en un ordenador portátil
Hay una conjetura que dice que todas las abuelas del mundo cuando van a decir el nombre de un nieto, dicen primero el nombre de muchos otros nietos antes de decir el nombre correcto.

El gobierno ha ideado una prueba para saber si una persona mayor es abuela o no. La prueba consiste en enseñar una foto de un nieto y preguntar cómo se llama ese nieto, anotando los nombres que dice la mujer.

Si la mujer sólo ha dicho el nombre del nieto al final de la lista de nombres se considera que es una abuela verdadera, en caso contrario es una falsa abuela.

Entrada
La entrada comienza por el número N de pruebas realizadas a distintas personas mayores.

Cada una de esas pruebas ocupa una única línea. Comienza con el nombre real del nieto de la foto. A continuación viene un número positivo que indica la cantidad de nombres que dijo la abuela en cuestión (como mucho 100), al que le sigue cada uno de esos nombres.

Para evitar confusiones, tanto el nombre real como los nombres dichos por las abuelas aparecerán siempre en minúsculas y no contendrán espacios ni tildes o eñes. La longitud de cada nombre no excederá los 10 caracteres.

Salida
Por cada prueba se escribirá una única línea con la cadena VERDADERA si la persona encuestada es una abuela real y FALSA si es una farsante.

Entrada de ejemplo
3
mireia 5 ximo vicente maria vicente mireia
juan 2 juan maria
ximo 1 ximo
Salida de ejemplo
 
VERDADERA
FALSA
FALSA
*/



Para este programa de Strings en java, resuelve el problema con variables legibles y funciones sencillas. Añade comentarios con los pasos que sigues, no utilices parseo de ningun tipo ni funciones como StringBuilder, ArrayList, Map... sólo Strings y Arrays simples y tipos primitivos). Añade souts donde sea necesario para darle sentido al programa y hacerlo amigables con el usuario.

/* 
Base raíz de 10
Tiempo máximo: 1,000 s  Memoria máxima: 4096 KiB
Los sistemas de numeración posicionales son aquellos que asignan a cada dígito un valor distinto en base a su posición. La llamada base 10, que es la que utilizamos normalmente, utiliza 10 dígitos distintos que son multiplicados por una potencia de 10 dependiendo del lugar que ocupan en el número completo.

4.321 = 4 × 103 + 3 × 102 + 2 × 101 + 1 × 100

Dependiendo del número elegido como base se necesitarán más o menos dígitos para expresar el mismo número. Además la elección de ciertos números como base da resultados curiosos. Uno de ellos es 10‾‾‾√2
 utilizando los dígitos habituales (0…9).

Entrada
La entrada estará compuesta por distintos casos de prueba, cada uno de ellos en una línea.

En cada línea aparecerá un número n (0 ≤ n ≤ 10100) que hay que convertir a base 10‾‾‾√2
.

Salida
Para cada caso de prueba se mostrará en una línea independiente el número n en su representación en base 10‾‾‾√2
.

Entrada de ejemplo
9
98
987
Salida de ejemplo
9
908
90807
*/ 